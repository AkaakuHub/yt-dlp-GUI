name: Build App
 
on:
  push:

env:
  App_Name: yt-dlp-GUI
  Solution_Path: yt-dlp-GUI.sln
  App_Project_Path: yt-dlp-GUI\yt-dlp-GUI.csproj

jobs:
  build:
    if : "contains( github.ref , 'tags/v')"
 
    strategy:
      matrix:
        configuration: [Release]
 
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
 
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0
 
    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet.exe for use with actions
      # You may pin to the exact commit or the version.
      # uses: NuGet/setup-nuget@a21f25cd3998bf370fde17e3f1b4c12c175172f9
      uses: NuGet/setup-nuget@v2.0.0
      
    - name: Restore NuGet Packages
      run: nuget restore yt-dlp-GUI.sln
      
    - name: Build App
      run: msbuild yt-dlp-GUI.sln /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Create release page: https://github.com/ncipollo/release-action
    - name: Get version
      shell: bash
      run: |
        echo "ver=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

    - name: Set env
      # if : "contains( github.ref , 'tags/v')"
      shell: bash
      run: |
        echo "version=${{ env.ver }}" >> $GITHUB_ENV          # exeに反映されます
        # echo "fileversion=${{ env.ver }}" >> $GITHUB_ENV    # 未設定だとVersionに連動します
        echo "app_x64_framework_name=${{ env.App_Name }}_win-x64_framework-dependent_ver${{ env.ver }}" >> $GITHUB_ENV
        echo "app_x64_self_name=${{ env.App_Name }}_win-x64_self-contained_ver${{ env.ver }}" >> $GITHUB_ENV

    - name: zipにまとめる
    # .exeと、.exe.configをzipにまとめる
      shell: pwsh
      run: |
        Compress-Archive -Path yt-dlp-GUI\bin\${{ matrix.configuration }}\${{ env.App_Name }}.exe -DestinationPath ${{ env.app_x64_framework_name }}.zip
        Compress-Archive -Path yt-dlp-GUI\bin\${{ matrix.configuration }}\${{ env.App_Name }}.exe.config -DestinationPath ${{ env.app_x64_framework_name }}.zip

    - name: Create release
      # if: "contains( github.ref , 'tags/v')"
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.ACTIONS_TOKEN }}
        tag: v${{ env.ver }}
        name: Ver ${{ env.ver }}
        body: |
          - Change design
          - Bug fix
        draft: true
        prerelease: false
        artifacts: "${{ env.app_x64_framework_name }}.zip"

    # # Remove artifacts to save space: https://github.com/c-hive/gha-remove-artifacts
    # - name: Remove old artifacts
    #   uses: c-hive/gha-remove-artifacts@v1
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #   age: '1 weeks'
    #   skip-recent: 2

    # - name: Upload GitHub Pages artifact
    #   uses: actions/upload-pages-artifact@v3.0.1
    #   with:
    #     # Artifact name
    #     name: yt-dlp-GUI_${{ matrix.configuration }}
    #     # Path of the directory containing the static assets.
    #     path: yt-dlp-GUI\bin\${{ matrix.configuration }}

    #     # tagのバージョン（例：「2.0」）に基づいて、リリースを作成します。
    # create-release:
    #     runs-on: windows-latest
    #     timeout-minutes: 15
    #     needs: [build]
    #     if: "contains( github.ref , 'tags/v')"

    #     steps:
    #       - name: Get version
    #         shell: bash
    #         run: |
    #           echo "ver=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

    #       - name: Set env
    #         shell: bash
    #         run: |
    #           echo "version=${{ env.ver }}" >> $GITHUB_ENV          # exeに反映されます
    #           # echo "fileversion=${{ env.ver }}" >> $GITHUB_ENV    # 未設定だとVersionに連動します
    #           echo "app_x64_framework_name=${{ env.App_Name }}_win-x64_framework-dependent_ver${{ env.ver }}" >> $GITHUB_ENV
    #           echo "app_x64_self_name=${{ env.App_Name }}_win-x64_self-contained_ver${{ env.ver }}" >> $GITHUB_ENV

    #       # Checks-out repository under $GITHUB_WORKSPACE: https://github.com/actions/checkout
    #       - name: Checkout
    #         uses: actions/checkout@v4
    #         with:
    #           fetch-depth: 0

    #       # don't output pdb -> /p:DebugType=None /p:DebugSymbols=false
    #       - name: dotnet publish x64 Framework-dependent
    #         run: >
    #           dotnet publish ${{ env.App_Project_Path }}
    #           -c Release
    #           -r win-x64
    #           --self-contained false -p:UseAppHost=true
    #           -p:PublishSingleFile=true
    #           -p:PublishReadyToRun=false
    #           -p:PublishTrimmed=false
    #           -p:IncludeNativeLibrariesForSelfExtract=true
    #           -o outputs\${{ env.app_x64_framework_name }}
    #           /p:DebugType=None /p:DebugSymbols=false

    #       # don't output pdb -> /p:DebugType=None /p:DebugSymbols=false
    #       - name: dotnet publish x64 Self-contained
    #         run: >
    #           dotnet publish ${{ env.App_Project_Path }}
    #           -c Release
    #           -r win-x64
    #           --self-contained true
    #           -p:PublishSingleFile=true
    #           -p:PublishReadyToRun=false
    #           -p:PublishTrimmed=false
    #           -p:IncludeNativeLibrariesForSelfExtract=true
    #           -o outputs\${{ env.app_x64_self_name }}
    #           /p:DebugType=None /p:DebugSymbols=false

    #       # Upload Actions Artifacts: https://github.com/actions/upload-artifact
    #       - name: Archive publish files
    #         uses: actions/upload-artifact@v4
    #         with:
    #           name: ${{ env.App_Name }}
    #           path: outputs

    #       # Create zip
    #       - name: Create zip archive
    #         shell: pwsh
    #         run: |
    #           Compress-Archive -Path outputs\${{ env.app_x64_framework_name }} -DestinationPath ${{ env.app_x64_framework_name }}.zip
    #           Compress-Archive -Path outputs\${{ env.app_x64_self_name }} -DestinationPath ${{ env.app_x64_self_name }}.zip

    #       # Create release page: https://github.com/ncipollo/release-action
    #       - name: Create release
    #         id: create_release
    #         uses: ncipollo/release-action@v1
    #         with:
    #           token: ${{ secrets.GITHUB_TOKEN }}
    #           tag: v${{ env.ver }}
    #           name: Ver ${{ env.ver }}
    #           body: |
    #             - Change design
    #             - Bug fix
    #           draft: true
    #           prerelease: false
    #           artifacts: "${{ env.app_x64_framework_name }}.zip, ${{ env.app_x64_self_name }}.zip"

    #       # Remove artifacts to save space: https://github.com/c-hive/gha-remove-artifacts
    #       - name: Remove old artifacts
    #         uses: c-hive/gha-remove-artifacts@v1
    #         with:
    #           token: ${{ secrets.GITHUB_TOKEN }}
    #         age: '1 weeks'
    #         skip-recent: 2